<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_frogEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init state and manipulate physics variables

state = "IDLE";
grav = 0.2;
timer = 0;
terminal_vel = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update state based on player proximity

if (state == "IDLE") {
    xvel = 0;
    yvel = 0;
    image_index = 0;
    
    if (timer == 0) {
        peri = 32;
        // If I'm close to the player
        if (collision_rectangle(
                x-lb-peri,y-tb-peri,x+rb+peri,y+bb+peri, 
                o_player, false, true)) {
            // Turn to face the player
            if (o_player.x &gt; x)
                image_xscale = 1;
            else
                image_xscale = -1;
            // if the player waits in my zone long enough, I will attack!
            timer++;
            
        }
    } 
    else if (timer &gt; 0) {
        timer++;
        if (timer &lt; 20) {
            if (o_player.x &gt; x)
                image_xscale = 1;
            else
                image_xscale = -1;
        }
        if (timer &gt; 30) {
            // INitiate jump attack
            state = "JUMP_ATTACK_START";
        }
    }
}

else if (state == "JUMP_ATTACK_START") {
    xvel = 4 * image_xscale;
    yvel = -3;
    state = "JUMP_ATTACK";
} 

else if (state == "JUMP_ATTACK") {
    if (on_ground) {
        state = "RECOVERY";
        timer = 0;
    }
    if (xvel &gt; 0) {
        xvel -= 0.2;
        if (xvel &lt; 0) xvel = 0;
    } else if (xvel &lt; 0) {
        xvel += 0.2;
        if (xvel &gt; 0) xvel = 0;
    }
}

else if (state == "RECOVERY") {
    timer++;
    if (timer &gt; 30) {
        state = "IDLE";
        timer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update animation frame based on yvel and state
if (state == "IDLE") {
    image_index = 0;
    image_alpha = 0.8;
    if (timer &gt; 0) {
        image_alpha = 0.8 + (timer*0.2/30);
    }
} else if (state == "JUMP_ATTACK_START") {
    image_index = 1;
} else if (state == "JUMP_ATTACK") {
    if (yvel &lt; -1) {
        image_index = 2;
    } else if (yvel &gt;= -1 and yvel &lt; 1) {
        image_index = 3;
    } else {
        image_index = 4;
    }
} else if (state == "RECOVERY") {
    image_alpha = 0.8;
    if (timer &lt; 2) {
        image_index = 5;
    } else if (timer &lt; 4) {
        image_index = 6;
    } else if (timer &lt; 6) {
        image_index = 7
    } else {
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
