<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_npc_orange</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init variables
self.is_talking = false;
state = 0;
image_speed = 0.1;
lb = 12;
rb = 12;
tb = 12;
bb = 12;
timer = 0;

just_talked_timer = 0;
text_counter = 0;
text_counter_counter = 0;
text_counter_counter_step = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// room creation code magic
myplayer = o_player;

mysound = snd_blue1;
myscript_start = nullscript;
myscript_end = nullscript;

mycolor = "orange";

self.monologue[0] = "hey^testing";
self.monologue[1] = "you were all i ever wanted.^i think i'll regret this";
self.curr_line = 0;
self.is_talking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var peri = 1;

// If I'm touching the player
if (collision_rectangle(
        x-lb-peri,y-tb-peri,x+rb+peri,y+bb+peri, 
        myplayer, false, true)) {
        
    if (keyboard_check_pressed(global.INPUT_ACTION)) {
        // start the conversation
        if (not self.is_talking) {
            // play a "talking" sound, and execute my "start" script"
            
                script_glitch_green();
                
            audio_play_sound(self.mysound, 1, false);
            script_execute(self.myscript_start);
            self.text_counter = 0;
            self.text_counter_counter = 0;
            self.curr_line = 0;
            
            self.is_talking = true;
        }
        // continue or end the conversation
        else if (self.is_talking) {
            // finish the line if i haven't finished yet.
            if (not script_hasFinishedLine()) {
                self.text_counter = 9999;
            }
            // continue the conversation if there's more of the monologue left
            else if (self.curr_line+1 &lt; array_length_1d(self.monologue)) {
                self.text_counter = 0;
                self.text_counter_counter = 0;
                
                self.curr_line += 1;
                
                    script_glitch_red();
            }
            // end the conversation if my monologue is over
            else {
                // execute my "end" script
                script_execute(self.myscript_end);
                
                self.is_talking = false;
                
                    script_glitch_grey();
            }
        }
    }
    
    // happens continuously if the npc is "talking"
    if (self.is_talking) {
        // stop the player
        myplayer.stopTimer = 10;
        
        // increment the text for a single dialog box
        text_counter_counter += 1;
        if (text_counter_counter &gt;= text_counter_counter_step) {
            text_counter_counter = 0;
            text_counter += 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw text
if (self.is_talking) {
    var text_y = view_hport[0] - 128;
    
    var player_gui_y = myplayer.y - view_yview[0];
    if (player_gui_y &gt; 96)
        text_y = 28;

    draw_set_colour(c_white);
    draw_rectangle(14, text_y - 18, view_wport[0] - 14, text_y + 128 - 14, false);
    
    draw_set_colour(c_black);
    draw_rectangle(16, text_y - 16, view_wport[0] - 16, text_y + 128 - 16, false);
    var portrait = asset_get_index("s_npc_portrait_" + mycolor);
    draw_sprite_stretched(portrait, 0, 32, text_y, 96, 96);
    draw_set_colour(c_white);
    draw_set_font(font_7);
    
    var text_arr = script_split(self.monologue[self.curr_line],"^");
    var count = 0;
    for (var i = 0; i &lt; array_length_1d(text_arr); i++) {
        if (i + count &gt; self.text_counter) break;
        var adjusted_count = self.text_counter - count;
        var text_substr = string_copy(text_arr[i], 1, adjusted_count);
        count += string_length(text_arr[i]);
        draw_text(144, text_y - 8 + (32*i), text_substr);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
