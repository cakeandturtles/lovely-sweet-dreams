<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_playerMask11</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player
z = 16;
dir = 90;
image_speed = 0.03;
camera_height = 16;


// Create target variables for movement
target_x = x;
target_y = y;

// Set the default draw color to white
draw_set_colour(c_white);

// Start 3d
d3d_start();

// Set the fog
dark_purple = make_color_rgb(27, 3, 59);
            // starting 16 units away from camera, 128 units where full opaque
//d3d_set_fog(true, dark_purple, 16, 128);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// keyboard inputs

// left and right
if (keyboard_check_pressed(vk_left)) {
    if (!place_meeting(target_x-32, target_y, o_wall11))
        target_x -= 32;
    dir = 180;
} if (keyboard_check_pressed(vk_right)) {
    if (!place_meeting(target_x+32, target_y, o_wall11))
        target_x += 32;
    dir = 0;
} 

// up and down
if (keyboard_check_pressed(vk_up)) {
    if (!place_meeting(target_x, target_y-32, o_wall11)) {
        target_y -= 32;
    }
    dir = 90;
}
if (keyboard_check_pressed(vk_down)) {
    if (!place_meeting(target_x, target_y+32, o_wall11)) {
        target_y += 32;
    }
    dir = 270;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interpolate between current position and target position
x = lerp(x, target_x, .1);
y = lerp(y, target_y, .1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set camera coordinates (and eye)
eye_x = x;
eye_y = y;
eye_z = z;
camera_x = x;
camera_y = y+96;
camera_height = ((y-112)*2);
camera_z = z+camera_height;
if (camera_z &lt; 0) camera_z = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// change player sprite based on direction
if (dir == 0) {
    sprite_index = s_playerSide5;
    image_xscale = -1;
} 
if (dir == 180) {
    sprite_index = s_playerSide5;
    image_xscale = 1;
}
if (dir == 90) {
    sprite_index = s_playerUp11;
    image_xscale = 1;
}
if (dir == 270) {
    sprite_index = s_playerDown5;
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Here, x and y are the ground coordinates, and z is the height

// Set the projection
// first point is location of camera (this maps up to our player)
// second point is location camera is looking at (this maps to our "dir")
// last point tells camera which direction is up (this is basically constant?)
d3d_set_projection(
    camera_x, camera_y, camera_z, 
    eye_x, eye_y, eye_z, 
    0, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the player sprite
/*var sprt_vect_x = lengthdir_y(12, dir);
var sprt_vect_y = lengthdir_x(12, dir);
d3d_draw_wall(
    x-sprt_vect_x, y+sprt_vect_y, 24,
    x+sprt_vect_x, y-sprt_vect_y, 0, player_tex, 
    1, 1);*/
    
d3d_transform_set_identity();
var x_rot = 0.22*camera_z + 90;
d3d_transform_add_rotation_x(x_rot);
d3d_transform_add_rotation_z(point_direction(camera_x, camera_y, x, y)+90);
d3d_transform_add_translation(x, y, 16);
draw_set_alpha_test(1);
draw_sprite_ext(sprite_index, image_index, 0, 0, image_xscale, 1, 0, -1, 1);
d3d_transform_set_identity();

draw_set_color(c_green);
draw_set_font(font_1);
draw_text(x, y, dir);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
